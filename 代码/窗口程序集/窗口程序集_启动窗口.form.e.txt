.版本 2
.支持库 dp1
.支持库 spec
.支持库 mysql

.程序集 窗口程序集_启动窗口
.程序集变量 花枝授权数据, 资源数据, , "0"
.程序集变量 花枝授权, 若凡授权类
.程序集变量 执行次, 整数型
.程序集变量 登录验证, 逻辑型
.程序集变量 全局_config, 文本型
.程序集变量 AISHANG_JS, 逻辑型
.程序集变量 无用base64编码, 文本型

.子程序 __启动窗口_创建完毕
    .局部变量 内容, 文本型
    .局部变量 文本数组, 文本型, , "0"
    .局部变量 计次, 整数型
    .局部变量 b, 整数型
    .局部变量 载入内容, 文本型
    .局部变量 载入内容fg, 文本型, , "0"
    .局部变量 验证服务器地址, 文本型

    置入代码 (#VMP_S)
    
    ' 程序_禁止重复运行 (“loginuser”, 真, “登录器后台已运行，请勿重复运行！”, #信息图标, 真, )
    
    华侨_加载皮肤_Win11_白 (, , )
    
    无用base64编码 ＝ 编码_BASE64编码 (到字节集 (文本_取随机字母 (16, 2)))
    无用base64日期.内容 ＝ 无用base64编码
    
    
    
    RtlAdjustPrivilege (20, 真, 0, 0)
    销毁线程001 ＝ 线程_启动 (&过期判断)
    销毁线程002 ＝ 线程_启动 (&获取启动器公告停用, , )
    
    验证_初始化 (“42.193.99.68”, 8000, 1)
    
    
    .如果真 (文件是否存在 (“./cJSON.dll”) ＝ 假)
        写到文件 (“./cJSON.dll”, #hp)
        
    .如果真结束
    
    
    内容 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\config.cfg”))
    .如果真 (内容 ≠ “”)
        文本数组 ＝ 分割文本 (内容, #换行符, )
        .计次循环首 (取数组成员数 (文本数组), 计次)
            b ＝ 寻找文本 (文本数组 [计次], “=”, , 假)
            .如果真 (b ≠ -1)
                列表框_ip存储.加入项目 (取文本左边 (文本数组 [计次], b － 1), 计次 ＋ 1)
                
            .如果真结束
            
        .计次循环尾 ()
    .如果真结束
    
    .如果 (文件是否存在 (“./config.cfg”) ＝ 真)
        载入内容 ＝ 读配置项 (取运行目录 () ＋ “.\config.cfg”, “hosts”, 列表框_ip存储.取项目文本 (0), )
        载入内容fg ＝ 分割文本 (载入内容, “|”, )
        .如果真 (取数组成员数 (载入内容fg) ＝ 4)
            编辑框_数据库账号.内容 ＝ 文本_解密 (载入内容fg [1], “ufcoxd.com”)
            编辑框_数据库密码.内容 ＝ 文本_解密 (载入内容fg [2], “ufcoxd.com”)
            编辑框_端口.内容 ＝ 文本_解密 (载入内容fg [3], “ufcoxd.com”)
            编辑框_密函.内容 ＝ 文本_解密 (载入内容fg [4], “ufcoxd.com”)
            授权卡密 ＝ 文本_解密 (载入内容fg [4], “ufcoxd.com”)
        .如果真结束
        
    .否则
        
    .如果结束
    置入代码 (#VMP_E)
    

.子程序 数组_排序, , , 二分法排序.只能对文本数组进行排序,整数数组请用核心支持库的.
    .参数 要排序的数组, 文本型, 参考 数组
    .参数 排序方式, 字节型, 可空, 可空,默认为0  0=升序排序 1=降序排序
    .参数 区分大小写, 逻辑型, 可空, 可空,默认“真”。真=区分大小写，假=不区分
    .局部变量 N, 整数型
    .局部变量 排序数组, 文本型, , "0"
    .局部变量 成员数量, 整数型
    .局部变量 高位, 整数型
    .局部变量 低位, 整数型
    .局部变量 中间位, 整数型
    .局部变量 比较结果, 整数型, , , 感谢会员 落雪 提供代码

    复制数组 (排序数组, 要排序的数组)
    清除数组 (要排序的数组)
    .如果真 (是否为空 (区分大小写) ＝ 真)
        区分大小写 ＝ 真
    .如果真结束
    
    .计次循环首 (取数组成员数 (排序数组), N)
        .判断开始 (成员数量 ＝ 0)
            插入成员 (要排序的数组, 1, 排序数组 [N])
        .默认
            
            高位 ＝ 成员数量
            低位 ＝ 1
            中间位 ＝ (高位 ＋ 低位) ＼ 2
            ' ; API_lstrcmp 通过比较ASCII码进行文本的排序,速度快
            .判断开始 (区分大小写 ＝ 假)
                比较结果 ＝ lstrcmp (到大写 (排序数组 [N]), 到大写 (要排序的数组 [成员数量])) ' 不区分就都算大写好了.因为在ACSII码中,大小写字母都是挨着的,所以不会出现"夹"在中间的字符.
            .默认
                比较结果 ＝ lstrcmp (排序数组 [N], 要排序的数组 [成员数量])
            .判断结束
            
            .判断开始 (比较结果 ≥ 0)
                插入成员 (要排序的数组, 成员数量 ＋ 1, 排序数组 [N])
            .判断 (lstrcmp (排序数组 [N], 要排序的数组 [1]) ≤ 0)
                插入成员 (要排序的数组, 1, 排序数组 [N])
            .默认
                .判断循环首 (高位 － 低位 ＞ 1)
                    .如果真 (排序数组 [N] ＝ 要排序的数组 [中间位])
                        跳出循环 ()
                    .如果真结束
                    .如果 (lstrcmp (排序数组 [N], 要排序的数组 [中间位]) ＜ 0)
                        高位 ＝ 中间位
                    .否则
                        低位 ＝ 中间位
                    .如果结束
                    中间位 ＝ (高位 ＋ 低位) ＼ 2
                .判断循环尾 ()
                .判断开始 (lstrcmp (排序数组 [N], 要排序的数组 [中间位]) ≤ 0)
                    插入成员 (要排序的数组, 中间位, 排序数组 [N])
                .默认
                    插入成员 (要排序的数组, 中间位 ＋ 1, 排序数组 [N])
                .判断结束
                
            .判断结束
            
        .判断结束
        成员数量 ＝ 取数组成员数 (要排序的数组)
    .计次循环尾 ()
    .如果真 (排序方式 ＝ 1)
        数组_反转 (要排序的数组)
    .如果真结束
    

.子程序 数组_反转, , , 数组倒序。数组的第一个成员与最后一个成员互换，第二个和倒数第二个互换，以此类推
    .参数 反转的数组, 文本型, 参考 数组
    .局部变量 成员数量, 整数型
    .局部变量 折中数量, 整数型
    .局部变量 临时成员, 文本型
    .局部变量 N, 整数型

    成员数量 ＝ 取数组成员数 (反转的数组)
    折中数量 ＝ 成员数量 ÷ 2
    .计次循环首 (折中数量, N)
        临时成员 ＝ 反转的数组 [N]
        反转的数组 [N] ＝ 反转的数组 [成员数量]
        反转的数组 [成员数量] ＝ 临时成员
        成员数量 ＝ 成员数量 － 1
    .计次循环尾 ()

.子程序 系统_处理事件1, , , 暂时转让控制权，以便让 Windows 操作系统有机会处理其它的如用户键盘或鼠标输入等事件。直到操作系统处理并发送完程序队列中的所有事件后，命令才会返回。
    .局部变量 CurrMsg, MSG

    .判断循环首 (PeekMessage (CurrMsg, 0, 0, 0, 1)) ' #PM_REMOVE=1接收消息并从队列里除掉。
        TranslateMessage (CurrMsg)
        DispatchMessage (CurrMsg) ' 分发消息
    .判断循环尾 ()

.子程序 文件_枚举, 整数型, , 枚举某个目录下的指定类型文件；成功返回文件数量；
    .参数 欲寻找的目录, 文本型, , 文件目录
    .参数 欲寻找的文件名, 文本型, , 如果寻找全部文件可以填入*.*，或*.txt只找txt文件
    .参数 文件数组, 文本型, 参考 可空 数组, 用于装载文件数组的变量；把寻找到的文件都放在这个数组里，并返回；
    .参数 是否带路径, 逻辑型, 可空, 默认为假； 真=带目录路径，如C:\012.txt； 假=不带，如 012.txt；
    .参数 是否按字母排序, 逻辑型, 可空, 默认为假；真=按字母a-z排序  假=不排序
    .参数 是否遍历子目录, 逻辑型, 可空, 留空默认为假；为真时文件数组不主动清空
    .局部变量 局_文件名, 文本型
    .局部变量 局_目录, 文本型

    .如果真 (是否遍历子目录 ＝ 假)
        清除数组 (文件数组)
    .如果真结束
    局_目录 ＝ 欲寻找的目录
    .如果真 (取文本右边 (局_目录, 1) ≠ “\”)
        局_目录 ＝ 局_目录 ＋ “\”
    .如果真结束
    局_文件名 ＝ 寻找文件 (局_目录 ＋ 欲寻找的文件名, )
    .判断循环首 (局_文件名 ≠ “”)
        .如果真 (是否带路径)
            局_文件名 ＝ 局_目录 ＋ 局_文件名
        .如果真结束
        加入成员 (文件数组, 局_文件名)
        系统_处理事件1 ()
        局_文件名 ＝ 寻找文件 (, )
    .判断循环尾 ()
    .如果真 (是否按字母排序)
        数组_排序 (文件数组, 0, )
    .如果真结束
    .如果真 (是否遍历子目录)
        局_文件名 ＝ 寻找文件 (局_目录 ＋ “*.*”, #子目录)
        .判断循环首 (局_文件名 ≠ “”)
            .如果真 (局_文件名 ≠ “.” 且 局_文件名 ≠ “..”)
                文件_枚举 (局_目录 ＋ 局_文件名, 欲寻找的文件名, 文件数组, 是否带路径, 是否按字母排序, 是否遍历子目录)
                系统_处理事件1 ()
            .如果真结束
            局_文件名 ＝ 寻找文件 (, #子目录)
        .判断循环尾 ()
    .如果真结束
    返回 (取数组成员数 (文件数组))
    

.子程序 _按钮_导入授权_被单击
    .局部变量 解密密钥数据, 文本型
    .局部变量 解密密钥数据fg, 文本型, , "0"

    置入代码 (#VMP_E)
    .如果真 (通用对话框_授权.打开 ())
        解密密钥数据 ＝ 到文本 (解密数据 (到字节集 (读入文件 (通用对话框_授权.文件名)), “ufcoxd.com”, ))
        
        解密密钥数据fg ＝ 分割文本 (解密密钥数据, “|”, )
        
        .如果 (取数组成员数 (解密密钥数据fg) ＝ 4)
            编辑框_密函.内容 ＝ 解密密钥数据fg [2] ' 授权码
            调试输出 (编辑框_密函.内容)
        .否则
            信息框 (“授权文件错误！”, 0, , )
        .如果结束
        
        调试输出 (解密密钥数据fg [1]) ' 随机值
        调试输出 (解密密钥数据fg [2]) ' 授权码
        调试输出 (解密密钥数据fg [3]) ' 随机值
        调试输出 (解密密钥数据fg [4]) ' 随机值
        
    .如果真结束
    置入代码 (#VMP_E)
    

.子程序 _按钮_登录主界面_被单击
    .局部变量 key, 文本型
    .局部变量 最终地址, 文本型
    .局部变量 第三层_, 字节集
    .局部变量 key2, 文本型
    .局部变量 最终地址2, 文本型
    .局部变量 是否成功, 逻辑型
    .局部变量 验证结果, 文本型
    .局部变量 验证通过密钥, 文本型
    .局部变量 局_接收到的内容, 字节集
    .局部变量 局_收到的内容数组, 文本型, , "0"
    .局部变量 局_到期时间, 日期时间型
    .局部变量 验证未通过密钥, 文本型
    .局部变量 分割返回数据, 文本型, , "0"
    .局部变量 卡密, 文本型
    .局部变量 局_接收到的内容1, 通用型, , "0"

    置入代码 (#VMP_S)
    
    按钮_导入授权.禁止 ＝ 真
    .如果真 (执行次 ＝ 0)
        按钮_登录主界面.禁止 ＝ 真
        
        .如果 (编辑框_数据库账号.内容 ＝ “”)
            信息框 (“账号不能为空”, 0, , )
            按钮_登录主界面.禁止 ＝ 假
            返回 ()
        .否则
            
        .如果结束
        .如果 (编辑框_数据库密码.内容 ＝ “”)
            信息框 (“密码不能为空”, 0, , )
            按钮_登录主界面.禁止 ＝ 假
            返回 ()
        .否则
            
        .如果结束
        .如果 (编辑框_端口.内容 ＝ “”)
            信息框 (“端口不能为空”, 0, , )
            按钮_登录主界面.禁止 ＝ 假
            返回 ()
        .否则
            
        .如果结束
        
        ' =========================================授权验证====================================================================================
        是否成功 ＝ 验证_卡登录 (编辑框_密函.内容, 验证结果)
        .判断开始 (是否成功 且 验证_调用远程JS (“userlogin”) ＝ “314.141516199824”)
            .判断开始 (验证_读验证返回数据 (9) ＝ “无”)
                信息框 (“密钥错误！”, 0, , )
                结束 ()
            .默认
                验证_合法性检测 () ' 这个函数可以检测是否被破解跳过来的。
            .判断结束
            
        .默认
            信息框 (“授权码不正确！” ＋ 验证结果, 0, , )
            结束 ()
        .判断结束
        
        ' =========================================授权验证====================================================================================
        本地读取授权的IP ＝ 验证_读验证返回数据 (9) ' 这里返回 通过 E盾验证的IP
        验证结果远程 ＝ 文本_加密 (到文本 (网页_访问S (“http://d1.1229pay.cn/zH0fC2jW8f.php?ip=” ＋ 本地读取授权的IP, 1)), “ufcoxd.com”)
        调试输出 (本地读取授权的IP ＋ 验证结果远程)
        ' ////////////////////////////////////////////////////////////////
        ' 调试输出 (“验主远程结果:” ＋ 验证结果远程)
        ' 调试输出 (“未通过NOT_EXIST结果：” ＋ 文本_加密 (“bK9eY4uK3aT1yG5pZ5gB7kQ3dN2yR7wH”, “ufcoxd.com”))
        ' 调试输出 (“通过EXIST结果：” ＋ 文本_加密 (“eY4bR9yZ0qP9pA2kL0lQ6lU2cE1oA9wA”, “ufcoxd.com”))
        ' 通过     EXIST  =  eY4bR9yZ0qP9pA2kL0lQ6lU2cE1oA9wA
        ' 未通过 NOT_EXIST = bK9eY4uK3aT1yG5pZ5gB7kQ3dN2yR7wH
        ' 未通过NOT_EXIST结果：725B29754924655B23714421695725604A257752277B4123745E2269422767581C8944832
        ' 通过XIST结果：754924724229694A206140296051227B5C207C41267C45227355217F512967511C8944832'
        
        ' 未通过：FFABAF725B29754924655B23714421695725604A257752277B4123745E2269422767581C8944832
        ' 已通过：FFABAF754924724229694A206140296051227B5C207C41267C45227355217F512967511C8944832
        ' ////////////////////////////////////////////////////////////////
        ' ==========================================通讯设置====================================================================================
        IPAddress ＝ 本地读取授权的IP
        全局_密文 ＝ #全局密文实例通讯
        ' 调试输出 (“全局密文件：” ＋ 全局_密文)
        ' ==========================================通讯设置====================================================================================
        
        
        
        .如果真 (验证结果远程 ＝ #远程IP验证未通过)
            信息框 (“软件未授权！”, 0, , )
            IPAddress ＝ “0”
            全局_密文 ＝ “0”
            结束 ()
        .如果真结束
        
        .如果真 (验证结果远程 ≠ #远程IP验证通过)
            IPAddress ＝ “0”
            全局_密文 ＝ “0”
            信息框 (“软件未授权！”, 0, , )
            结束 ()
        .如果真结束
        
        
        .如果真 (验证结果远程 ＝ #远程IP验证通过)
            .如果 (本地读取授权的IP ＝ 验证_读验证返回数据 (9))
                执行次 ＝ 1 ' 打开执行一次，反调试破解
                mysql句柄 ＝ 连接MySql (IPAddress, 编辑框_数据库账号.内容, 编辑框_数据库密码.内容, , 到数值 (编辑框_端口.内容))
                邮箱句柄 ＝ 连接MySql (IPAddress, 编辑框_数据库账号.内容, 编辑框_数据库密码.内容, , 到数值 (编辑框_端口.内容))
                发送邮箱句柄 ＝ 连接MySql (IPAddress, 编辑框_数据库账号.内容, 编辑框_数据库密码.内容, , 到数值 (编辑框_端口.内容))
                存储变量IP地址 ＝ IPAddress
                存储变量账号地址 ＝ 编辑框_数据库账号.内容
                存储变量密码地址 ＝ 编辑框_数据库密码.内容
                
                .如果 (mysql句柄 ＞ 0)
                    写配置项 (取运行目录 () ＋ “\config.cfg”, “hosts”, IPAddress, 文本_加密 (编辑框_数据库账号.内容, “ufcoxd.com”) ＋ “|” ＋ 文本_加密 (编辑框_数据库密码.内容, “ufcoxd.com”) ＋ “|” ＋ 文本_加密 (编辑框_端口.内容, “ufcoxd.com”) ＋ “|” ＋ 文本_加密 (编辑框_密函.内容, “ufcoxd.com”))
                    
                    载入 (_主界面窗口, , 假)
                .否则
                    信息框 (“链接数据库失败！请检查密码或者是否开启MySQL”, 0, , )
                    汇编_结束自身 (-1)
                .如果结束
                
            .否则
                信息框 (“软件授权不正确!”, 0, , )
                IPAddress ＝ “0”
                全局_密文 ＝ “0”
                汇编_结束自身 (-1)
            .如果结束
            
        .如果真结束
        
        
    .如果真结束
    
    
    
    
    置入代码 (#VMP_E)
    

.子程序 _列表框_ip存储_列表项被选择
    .局部变量 载入内容, 文本型
    .局部变量 载入内容fg, 文本型, , "0"

    载入内容 ＝ 读配置项 (取运行目录 () ＋ “.\config.cfg”, “hosts”, 列表框_ip存储.取项目文本 (列表框_ip存储.现行选中项), )
    载入内容fg ＝ 分割文本 (载入内容, “|”, )
    .如果真 (取数组成员数 (载入内容fg) ＝ 4)
        编辑框_数据库账号.内容 ＝ 文本_解密 (载入内容fg [1], “ufcoxd.com”)
        编辑框_数据库密码.内容 ＝ 文本_解密 (载入内容fg [2], “ufcoxd.com”)
        编辑框_端口.内容 ＝ 文本_解密 (载入内容fg [3], “ufcoxd.com”)
        编辑框_密函.内容 ＝ 文本_解密 (载入内容fg [4], “ufcoxd.com”)
        授权卡密 ＝ 文本_解密 (载入内容fg [4], “ufcoxd.com”)
    .如果真结束
    

.子程序 _列表框_ip存储_双击选择
    .如果 (列表框_ip存储.取项目文本 (列表框_ip存储.现行选中项) ＝ “”)
        返回 ()
    .否则
        _按钮_登录主界面_被单击 ()
    .如果结束
    
    
    

