.版本 2

.程序集 类_json
.程序集变量 dataName, 文本型
.程序集变量 JsonStr, 对象

.子程序 _初始化, , , 当基于本类的对象被创建后，此方法会被自动调用
    dataName ＝ “da”
    初始化 ()

.子程序 _销毁, , , 当基于本类的对象被销毁前，此方法会被自动调用
    JsonStr.清除 ()
    CoUninitialize ()

.子程序 初始化
    CoInitialize (#NULL)
    .如果真 (JsonStr.创建 (“MSScriptControl.ScriptControl”, ) ＝ 假)
        输出调试文本 (“创建指定类型的 COM 对象失败！”)
        返回 ()
    .如果真结束
    JsonStr.写属性 (“Language”, “JavaScript”)
    JsonStr.逻辑方法 (“AddCode”, #js2)
    JsonStr.逻辑方法 (“Eval”, “var ” ＋ dataName ＋ “ = {}, str_Code = String.fromCharCode(9216), str_reg = new RegExp(str_Code, 'g')”)

.子程序 解析, 逻辑型, 公开, 如果返回假，请检查Json文本是否为标准格式，如果确定，请检查 Windows 里 System 和 SysWOW64 是否需要权限
    .参数 JSON文本, 文本型, , 必须是标准的JSON格式！如果文本中有转义字符且需要保留，请传入前自行处理。
    .参数 为对象, 逻辑型, 可空
    .参数 错误原因, JsonError, 可空
    .局部变量 局_JSON文本, 文本型
    .局部变量 局_JsonError, 对象

    ' 暂时无法通过替换换行的方式来纠正JSON格式，原因是如果JSON是格式化的，替换了换行格式就会错误！
    .如果真 (JsonStr.是否为空 () ＝ 假)
        JsonStr.清除 ()
        初始化 ()
    .如果真结束
    .如果真 (JsonStr.是否为空 ())
        返回 (假)
    .如果真结束
    JsonStr.逻辑方法 (“Eval”, “var ” ＋ dataName ＋ “ = null”)
    局_JSON文本 ＝ JSON文本
    .如果 (为对象)
        JsonStr.逻辑方法 (“AddCode”, “var ” ＋ dataName ＋ “ = ” ＋ 局_JSON文本)
    .否则
        JsonStr.逻辑方法 (“AddCode”, “var ” ＋ dataName ＋ “ = eval(” ＋ 局_JSON文本 ＋ “)”)
    .如果结束
    .如果真 (是否为空 (错误原因) ＝ 假)
        局_JsonError ＝ JsonStr.对象型方法 (“Error”, )
        错误原因.Number ＝ 局_JsonError.读数值属性 (“Number”, )
        错误原因.Source ＝ 局_JsonError.读文本属性 (“Source”, )
        错误原因.Description ＝ 局_JsonError.读文本属性 (“Description”, )
        错误原因.HelpFile ＝ 局_JsonError.读文本属性 (“HelpFile”, )
        错误原因.HelpContext ＝ 局_JsonError.读数值属性 (“HelpContext”, )
        错误原因.Text ＝ 局_JsonError.读文本属性 (“Text”, )
        错误原因.Line ＝ 局_JsonError.读数值属性 (“Line”, )
        错误原因.Column ＝ 局_JsonError.读数值属性 (“Column”, )
    .如果真结束
    返回 (JsonStr.逻辑方法 (“Eval”, dataName ＋ “ != null”))

.子程序 清除, 逻辑型, 公开
    返回 (JsonStr.逻辑方法 (“Eval”, dataName ＋ “ = {}”))

.子程序 取数据文本, 文本型, 公开
    返回 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ dataName ＋ “).replace(str_reg, '\\')”))

.子程序 置属性, 逻辑型, 公开, 非认真阅读模块实现原理请无视返回值
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 值, 文本型, 可空
    .参数 为对象, 逻辑型, 可空, 属性解析为json对象或数组
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型
    .局部变量 局_是否存在, 逻辑型
    .局部变量 局_类型, 文本型

    局_属性名 ＝ 属性名
    局_值 ＝ 值
    
    局_是否存在 ＝ Property_exists (局_属性名)
    .如果真 (为对象)
        .如果真 (局_值 ＝ “”)
            局_值 ＝ “{}”
        .如果真结束
        局_类型 ＝ JsonStr.文本方法 (“Eval”, “Object.prototype.toString.call(” ＋ 局_属性名 ＋ “)”)
        .如果真 (局_是否存在 且 局_类型 ＝ “[object Object]”)
            返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ = get__extend(” ＋ 局_属性名 ＋ “, ” ＋ 局_值 ＋ “)”))
        .如果真结束
        返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ = eval(” ＋ 值 ＋ “)”))
    .如果真结束
    
    局_值 ＝ 子文本替换 (局_值, “\”, “\\”, , , 真)
    局_值 ＝ 子文本替换 (局_值, “'”, “\'”, , , 真)
    局_值 ＝ 子文本替换 (局_值, #引号, “\” ＋ #引号, , , 真)
    局_值 ＝ 子文本替换 (局_值, 字符 (13), “\r”, , , 真)
    局_值 ＝ 子文本替换 (局_值, 字符 (10), “\n”, , , 真)
    返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ = '” ＋ 局_值 ＋ “'.replace(/\\/g, str_Code)”))

.子程序 置属性对象, 逻辑型, 公开, 属性解析为json对象或数组！非认真阅读模块实现原理请无视返回值
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 值, 文本型, 可空
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ = eval(” ＋ 值 ＋ “)”))

.子程序 Property_exists, 逻辑型
    .参数 属性名, 文本型, 参考 可空, 请勿用变量

    .判断开始 (属性名 ≈ dataName 且 JsonStr.逻辑方法 (“Eval”, 属性名 ＋ “ != null”))
        返回 (真)
    .判断 (属性名 ＝ “”)
        属性名 ＝ dataName
    .判断 (属性名 ≈ “[”)
        属性名 ＝ dataName ＋ 属性名
    .默认
        属性名 ＝ dataName ＋ “.” ＋ 属性名
    .判断结束
    返回 (JsonStr.逻辑方法 (“Eval”, 属性名 ＋ “ != null”))

.子程序 属性是否存在, 逻辑型, 公开
    .参数 属性名, 文本型, 可空
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    返回 (Property_exists (局_属性名))

.子程序 取类型, 整数型, 公开, -1、未知；0、未定义；1、布尔值；2、数值；4、对象；5、数组；6、字符串
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型
    .局部变量 局_类型, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    .如果真 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ == null”))
        返回 (0) ' 未定义
    .如果真结束
    局_类型 ＝ JsonStr.文本方法 (“Eval”, “Object.prototype.toString.call(” ＋ 局_属性名 ＋ “)”)
    .判断开始 (局_类型 ＝ “[object String]”)
        返回 (6) ' 字符串
    .判断 (局_类型 ＝ “[object Array]”)
        返回 (5) ' 数组
    .判断 (局_类型 ＝ “[object Object]”)
        返回 (4) ' 对象
    .判断 (局_类型 ＝ “[object Number]”)
        返回 (2) ' 数值
    .判断 (局_类型 ＝ “[object Boolean]”)
        返回 (1) ' 布尔值
    .默认
        返回 (-1) ' 未知
    .判断结束
    

.子程序 取通用属性, 文本型, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 为对象, 逻辑型, 可空, 属性解析为json对象或数组
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    .如果真 (为对象)
        返回 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ 局_属性名 ＋ “).replace(str_reg, '\\')”))
    .如果真结束
    返回 (JsonStr.文本方法 (“Eval”, 局_属性名 ＋ “.toString().replace(str_reg, '\\')”))

.子程序 取所有属性名, 整数型, 公开, 属性名指向JSON类型必须为对象
    .参数 属性名数组, 文本型, 参考 可空 数组
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    局_值 ＝ JsonStr.文本方法 (“Eval”, “get__name_All(” ＋ 局_属性名 ＋ “)”)
    属性名数组 ＝ 分割文本 (局_值, #换行符, )
    返回 (取数组成员数 (属性名数组))

.子程序 成员数, 整数型, 公开, 属性名指向JSON类型必须为数组
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (到整数 (JsonStr.数值方法 (“Eval”, “get__count(” ＋ 局_属性名 ＋ “)”)))

.子程序 取属性, 类_json, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型
    .局部变量 局_json, 类_json

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    局_json.解析 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ 局_属性名 ＋ “).replace(str_reg, '\\')”))
    返回 (局_json)

.子程序 加成员, 逻辑型, 公开
    .参数 值, 文本型, 可空
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 为对象, 逻辑型, 可空, 属性解析为json对象或数组
    .参数 开头添加, 逻辑型, 可空, 留空默认为末尾添加
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型

    局_属性名 ＝ 属性名
    局_值 ＝ 值
    
    Property_exists (局_属性名)
    .如果真 (为对象 ＝ 假)
        局_值 ＝ “'” ＋ 局_值 ＋ “'”
    .如果真结束
    
    .如果真 (开头添加)
        返回 (JsonStr.逻辑方法 (“Eval”, “if (Object.prototype.toString.call(” ＋ 局_属性名 ＋ “) != '[object Array]') { ” ＋ 局_属性名 ＋ “ = new Array() } ” ＋ 局_属性名 ＋ “.unshift(” ＋ 局_值 ＋ “)”))
    .如果真结束
    
    返回 (JsonStr.逻辑方法 (“Eval”, “if (Object.prototype.toString.call(” ＋ 局_属性名 ＋ “) != '[object Array]') { ” ＋ 局_属性名 ＋ “ = new Array() } ” ＋ 局_属性名 ＋ “.push(” ＋ 局_值 ＋ “)”))

.子程序 取成员, 类_json, 公开
    .参数 成员索引, 整数型, 可空, 成员索引从0开始
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型
    .局部变量 局_json, 类_json

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    局_json.解析 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ 局_属性名 ＋ “[” ＋ 到文本 (成员索引) ＋ “]).replace(str_reg, '\\')”))
    返回 (局_json)

.子程序 取成员文本, 文本型, 公开
    .参数 成员索引, 整数型, 可空, 成员索引从0开始
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 为对象, 逻辑型, 可空, 属性解析为json对象或数组
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    .如果真 (为对象)
        返回 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ 局_属性名 ＋ “[” ＋ 到文本 (成员索引) ＋ “]).replace(str_reg, '\\')”))
    .如果真结束
    返回 (JsonStr.文本方法 (“Eval”, 局_属性名 ＋ “[” ＋ 到文本 (成员索引) ＋ “].replace(str_reg, '\\')”))

.子程序 置成员, 逻辑型, 公开
    .参数 成员索引, 整数型, 可空, 成员索引从0开始
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 值, 文本型, 可空
    .参数 为对象, 逻辑型, 可空, 属性解析为json对象或数组
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型

    局_属性名 ＝ 属性名
    局_值 ＝ 值
    
    Property_exists (局_属性名)
    .如果真 (为对象 ＝ 假)
        局_值 ＝ “'” ＋ 局_值 ＋ “'”
    .如果真结束
    返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “[” ＋ 到文本 (成员索引) ＋ “] = ” ＋ 局_值))

.子程序 删成员, 逻辑型, 公开
    .参数 成员索引, 整数型, 可空, 成员索引从0开始
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “.splice(” ＋ 到文本 (成员索引) ＋ “, 1)”))

.子程序 删属性, 逻辑型, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (JsonStr.逻辑方法 (“Eval”, “delete ” ＋ 局_属性名))

.子程序 置属性数值, 逻辑型, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .参数 值, 双精度小数型, 可空
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型

    局_属性名 ＝ 属性名
    局_值 ＝ 到文本 (值)
    
    Property_exists (局_属性名)
    返回 (JsonStr.逻辑方法 (“Eval”, 局_属性名 ＋ “ = ” ＋ 局_值))

.子程序 取属性数值, 双精度小数型, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (JsonStr.数值方法 (“Eval”, 局_属性名))

.子程序 取属性对象, 文本型, 公开
    .参数 属性名, 文本型, 可空, ['属性名是INT或运算符']
    .局部变量 局_属性名, 文本型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    返回 (JsonStr.文本方法 (“Eval”, “JSON.stringify(” ＋ 局_属性名 ＋ “).replace(str_reg, '\\')”))

.子程序 取回对象, 对象, 公开
    返回 (JsonStr)

.子程序 取所有属性值, 整数型, 公开, 取指定路径下所有属性的值
    .参数 属性值数组, 文本型, 参考 可空 数组
    .参数 属性名, 文本型, 可空, 属性名指向JSON类型必须为对象
    .参数 向下递归, 逻辑型, 可空
    .局部变量 局_属性名, 文本型
    .局部变量 局_值, 文本型
    .局部变量 len, 整数型

    局_属性名 ＝ 属性名
    
    Property_exists (局_属性名)
    JsonStr.方法 (“Eval”, “var str_all = new Array()”)
    JsonStr.方法 (“Eval”, “get__nodeValue(” ＋ 局_属性名 ＋ “, ” ＋ 选择 (向下递归, “true”, “false”) ＋ “)”)
    局_值 ＝ JsonStr.文本方法 (“Eval”, “str_all.join('[2020年7月20日20时0分0秒]')”)
    属性值数组 ＝ 分割文本 (局_值, “[2020年7月20日20时0分0秒]”, )
    len ＝ 取数组成员数 (属性值数组)
    返回 (len)

