.版本 2

.程序集 模块功能
.子程序 编码_Ansi到Utf8, 字节集
    .参数 ansi文本, 文本型

    返回 (W2A_CP (编码_Ansi到Unicode (ansi文本, ), #CP_UTF8))

.子程序 W2A_CP, 字节集
    .参数 lpw, 字节集
    .参数 acp, 整数型, , #CP_x
    .局部变量 CharStr, 字节集
    .局部变量 lpwsz, 整数型
    .局部变量 len, 整数型
    .局部变量 ByteStr, 字节集
    .局部变量 lpsz, 整数型

    CharStr ＝ lpw ＋ { 0, 0 }
    lpwsz ＝ 取指针字节集_ (CharStr)
    .如果真 (lpwsz ≠ 0 且 lstrlenW (lpwsz) ＞ 0)
        len ＝ WideCharToMultiByte (acp, 0, lpwsz, -1, 0, 0, 0, 0)
        ByteStr ＝ 取空白字节集 (len)
        lpsz ＝ 取指针_字节集型 (ByteStr)
        WideCharToMultiByte (acp, 0, lpwsz, -1, lpsz, len, 0, 0)
        ByteStr ＝ 指针到字节集 (lpsz, strlen (lpsz)) ' 不保留结尾的0
    .如果真结束
    返回 (ByteStr)

.子程序 编码_URL编码, 文本型, , 精易论坛 => %BE%AB%D2%D7%C2%DB%CC%B3
    .参数 欲编码的文本, 文本型
    .参数 不编码字母数字, 逻辑型, 可空, 不需要编码【字母数字.-】可以把此参数设置为真
    .参数 是否UTF8, 逻辑型, 可空, 先把文本转换成UTF8编码,再编码成URL
    .局部变量 szChar, 字节集

    .如果 (是否UTF8)
        szChar ＝ 编码_Ansi到Utf8 (欲编码的文本)
    .否则
        szChar ＝ 到字节集 (欲编码的文本)
    .如果结束
    返回 (URL编码_字节集 (szChar, 不编码字母数字))

.子程序 __set_byte, 整数型, , 请确保指针的合法性,写到内存
    .参数 lpAddr, 整数型, , 内存地址
    .参数 offset, 整数型, , 偏移
    .参数 value, 字节型, , 写入值

    置入代码 ({ 139, 93, 8, 139, 77, 12, 139, 4, 11, 138, 85, 16, 136, 20, 11, 201, 194, 12, 0 })
    ' mov ebx,[ebp+8]
    ' mov ecx,[ebp+12]
    ' mov eax,[ecx+ebx]
    ' mov dl,[ebp+16]
    ' mov [ecx+ebx],dl
    ' leave
    ' ret 12
    返回 (0)

.子程序 URL编码_字节集, 文本型
    .参数 被转换数据, 字节集
    .参数 不转换部分字符, 逻辑型, , '()*-. 0-9 A-Z a-z_
    .局部变量 dwLen, 整数型
    .局部变量 szChar, 字节集
    .局部变量 pChar, 整数型
    .局部变量 i, 整数型
    .局部变量 n, 整数型

    dwLen ＝ 取字节集长度 (被转换数据)
    .如果真 (dwLen ＞ 0)
        szChar ＝ 取空白字节集 (dwLen × 3 ＋ 1) ' 必须0结尾
        pChar ＝ 取指针字节集_ (szChar)
        .计次循环首 (dwLen, i)
            .如果真 (被转换数据 [i] ＝ 0)
                到循环尾 ()
            .如果真结束
            
            ' 被转换数据 [i] ＞ 38 且 被转换数据 [i] ＜ 43┃'()*
            ' 被转换数据 [i] ＝ 45┃-
            ' 被转换数据 [i] ＝ 46┃.
            ' 被转换数据 [i] ＞ 47 且 被转换数据 [i] ＜ 58┃0-9
            ' 被转换数据 [i] ＞ 64 且 被转换数据 [i] ＜ 91┃A-Z
            ' 被转换数据 [i] ＞ 96 且 被转换数据 [i] ＜ 123┃a-z
            ' 被转换数据 [i] ＝ 95┃_
            
            .判断开始 (不转换部分字符 且 (被转换数据 [i] ＞ 38 且 被转换数据 [i] ＜ 43 或 被转换数据 [i] ＝ 45 或 被转换数据 [i] ＝ 46 或 (被转换数据 [i] ＞ 47 且 被转换数据 [i] ＜ 58) 或 (被转换数据 [i] ＞ 64 且 被转换数据 [i] ＜ 91) 或 (被转换数据 [i] ＞ 96 且 被转换数据 [i] ＜ 123) 或 被转换数据 [i] ＝ 95))
                __set_byte (pChar, n, 被转换数据 [i])
                n ＝ n ＋ 1
            .判断 (被转换数据 [i] ＝ 32) ' 空格
                __set_byte (pChar, n, 43)
                n ＝ n ＋ 1
            .默认
                n ＝ n ＋ sprintf (pChar ＋ n, “%%%02X”, 被转换数据 [i])
            .判断结束
            
        .计次循环尾 ()
    .如果真结束
    返回 (取字节集数据 (szChar, #文本型, ))

.子程序 _十进制, 文本型
    .参数 匿名参数_1, 整数型
    .局部变量 匿名局部变量_1, 文本型

    匿名局部变量_1 ＝ 取空白文本 (8)
    置入代码 ({ 139, 69, 8, 87, 139, 125, 252, 49, 201, 177, 8, 80, 36, 15, 60, 9, 119, 4, 4, 48, 235, 2, 4, 55, 136, 68, 15, 255, 88, 193, 232, 4, 226, 233, 95 })
    返回 (匿名局部变量_1)

.子程序 到颜色值, 整数型, , 将十六进制颜色文本转换成十进制颜色值
    .参数 颜色文本, 文本型, , 十六进制颜色
    .局部变量 文本888, 文本型
    .局部变量 结果, 长整数型
    .局部变量 i, 整数型

    文本888 ＝ 到大写 (取重复文本 (6 － 取文本长度 (颜色文本), “0”) ＋ 颜色文本)
    文本888 ＝ 取文本中间 (文本888, 5, 2) ＋ 取文本中间 (文本888, 3, 2) ＋ 取文本左边 (文本888, 2)
    .计次循环首 (6, i)
        结果 ＝ 结果 × 16 ＋ 寻找文本 (“0123456789ABCDEF”, 取文本中间 (文本888, i, 1), , 假) － 1
    .计次循环尾 ()
    返回 (结果)
    

.子程序 _十六进制, 整数型
    .参数 匿名参数_1, 文本型
    .局部变量 匿名局部变量_1, 字节集
    .局部变量 匿名局部变量_2, 整数型
    .局部变量 匿名局部变量_3, 整数型
    .局部变量 匿名局部变量_4, 整数型

    匿名局部变量_1 ＝ 到字节集 (匿名参数_1)
    .计次循环首 (取字节集长度 (匿名局部变量_1), 匿名局部变量_2)
        .判断开始 (匿名局部变量_1 [匿名局部变量_2] ≥ 97)
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 87
        .判断 (匿名局部变量_1 [匿名局部变量_2] ≥ 65)
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 55
        .默认
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 48
        .判断结束
        匿名局部变量_4 ＝ 左移 (匿名局部变量_4, 4) ＋ 匿名局部变量_3
    .计次循环尾 ()
    返回 (匿名局部变量_4)

.子程序 S_十到十六, 文本型
    .参数 十进制长整数, 长整数型
    .局部变量 匿名局部变量_1, 整数型
    .局部变量 匿名局部变量_2, 整数型
    .局部变量 匿名局部变量_3, 文本型

    置入代码 ({ 139, 69, 8, 137, 69, 248, 139, 69, 12, 137, 69, 244 })
    匿名局部变量_3 ＝ _十进制 (匿名局部变量_1)
    .如果真 (匿名局部变量_2 ≠ 0)
        匿名局部变量_3 ＝ _十进制 (匿名局部变量_2) ＋ 匿名局部变量_3
    .如果真结束
    返回 (匿名局部变量_3)

.子程序 S_十六到十, 长整数型
    .参数 十六进制文本, 文本型, , 字母不区分大小写
    .局部变量 匿名局部变量_1, 字节集
    .局部变量 匿名局部变量_2, 整数型
    .局部变量 匿名局部变量_3, 整数型
    .局部变量 匿名局部变量_4, 整数型
    .局部变量 匿名局部变量_5, 整数型
    .局部变量 匿名局部变量_6, 整数型
    .局部变量 匿名局部变量_7, 整数型
    .局部变量 匿名局部变量_8, 长整数型

    匿名局部变量_1 ＝ 取重复字节集 (16, { 48 }) ＋ 到字节集 (十六进制文本)
    匿名局部变量_1 ＝ 取字节集右边 (匿名局部变量_1, 16)
    .变量循环首 (取字节集长度 (匿名局部变量_1), 1, -1, 匿名局部变量_2)
        .判断开始 (匿名局部变量_1 [匿名局部变量_2] ≥ 97)
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 87
        .判断 (匿名局部变量_1 [匿名局部变量_2] ≥ 65)
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 55
        .默认
            匿名局部变量_3 ＝ 匿名局部变量_1 [匿名局部变量_2] － 48
        .判断结束
        .如果 (匿名局部变量_2 ≤ 8)
            匿名局部变量_4 ＝ 匿名局部变量_4 ＋ 匿名局部变量_3 × 求次方 (16, 匿名局部变量_5)
            匿名局部变量_5 ＝ 匿名局部变量_5 ＋ 1
        .否则
            匿名局部变量_6 ＝ 匿名局部变量_6 ＋ 匿名局部变量_3 × 求次方 (16, 匿名局部变量_7)
            匿名局部变量_7 ＝ 匿名局部变量_7 ＋ 1
        .如果结束
        
    .变量循环尾 ()
    置入代码 ({ 139, 69, 232, 137, 69, 220, 139, 69, 240, 137, 69, 224 })
    
    
    
    
    
    
    
    
    
    
    返回 (匿名局部变量_8)

.子程序 rgbToArgb, 长整数型
    .参数 A, 整数型
    .参数 R, 整数型
    .参数 G, 整数型
    .参数 B, 整数型
    .局部变量 temp, 文本型

    temp ＝ “”
    temp ＝ temp ＋ 取文本右边 (S_十到十六 (A), 2)
    temp ＝ temp ＋ 取文本右边 (S_十到十六 (B), 2)
    temp ＝ temp ＋ 取文本右边 (S_十到十六 (G), 2)
    temp ＝ temp ＋ 取文本右边 (S_十到十六 (R), 2)
    
    
    .如果真 (取文本长度 (temp) ≠ 8)
        
        返回 (4294967295)
    .如果真结束
    返回 (S_十六到十 (temp))

.子程序 字节集到十六进制, 文本型, , 将字节集转换到十六进制文本,返回十六进制文本内容   如:453F581D0A
    .参数 字节集, 字节集, , 欲转换的字节集
    .局部变量 a, 整数型
    .局部变量 新文本, 文本型
    .局部变量 i, 整数型

    a ＝ 打开内存文件 ()
    .计次循环首 (取字节集长度 (字节集), i)
        写出文本 (a, 到十六进制_单 (字节集 [i]))
    .计次循环尾 ()
    移到文件首 (a)
    新文本 ＝ 读入文本 (a, )
    关闭文件 (a)
    返回 (新文本)
    

.子程序 十六进制到字节集, 字节集, , 将十六进制字符串形式字节集文本转换到字节集,格式不正确返回空字节集
    .参数 文本, 文本型, , 如: 453F581D0A
    .局部变量 原数据, 字节集
    .局部变量 新数据, 字节集
    .局部变量 i, 整数型

    原数据 ＝ 到字节集 (删全部空 (文本))
    新数据 ＝ 取空白字节集 (取字节集长度 (原数据) ＼ 2)
    .计次循环首 (取字节集长度 (新数据), i)
        新数据 [i] ＝ (寻找字节集 ({ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 }, 到字节集 (原数据 [i × 2 － 1]), ) － 1) × 16 ＋ 寻找字节集 ({ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 }, 到字节集 (原数据 [i × 2]), ) － 1
    .计次循环尾 ()
    返回 (新数据)
    

.子程序 文本_解密, 文本型, , 失败返回空文本
    .参数 参数_待解密文本, 文本型, , 待解密文本
    .参数 参数_解密的密码, 文本型, , 解密的密码<建议5位以上的数字>
    .局部变量 局_计次, 整数型
    .局部变量 局_过度字节集, 字节集
    .局部变量 局_待加密文本, 字节集

    .如果真 (取文本右边 (参数_待解密文本, 9) ≠ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_解密的密码)), 3, 9)))
        返回 (“”)
    .如果真结束
    局_待加密文本 ＝ 字节集_十六进制到字节集 (取文本左边 (参数_待解密文本, 取文本长度 (参数_待解密文本) － 9))
    .计次循环首 (取字节集长度 (局_待加密文本), 局_计次)
        局_过度字节集 ＝ 局_过度字节集 ＋ 到字节集 (到字节 (位异或 (局_待加密文本 [局_计次], 3600)))
    .计次循环尾 ()
    返回 (到文本 (局_过度字节集))

.子程序 取进程ID, 整数型, , 取指定进程的进程ID(返回第一个进程ID,失败返回0)
    .参数 进程名, 文本型, , (不区分大小写)
    .局部变量 临时信息, 进程信息_
    .局部变量 进程句柄, 整数型
    .局部变量 进程快照, 整数型

    进程快照 ＝ _创建快照 (#TH32CS_SNAPPROCESS, 0)
    .如果真 (进程快照 ≠ 0)
        临时信息.dwSize ＝ 296
        进程句柄 ＝ _第一个 (进程快照, 临时信息)
        .判断循环首 (进程句柄 ≠ 0)
            .如果真 (到小写 (进程名) ＝ 到小写 (到文本 (临时信息.进程名称))) ' 比较进程名
                _关闭对象 (进程快照)
                返回 (临时信息.进程ID)
            .如果真结束
            进程句柄 ＝ _下一个 (进程快照, 临时信息)
        .判断循环尾 ()
        _关闭对象 (进程快照)
    .如果真结束
    返回 (0)
    

.子程序 字节集到十六进制文本_dtcser, 文本型, , 嵌ASM
    .参数 原文, 字节集
    .局部变量 原文长度, 整数型
    .局部变量 原文地址, 整数型
    .局部变量 结果, 文本型
    .局部变量 结果地址, 整数型
    .局部变量 码表地址, 整数型

    置入代码 ({ 139, 93, 8, 139, 27, 139, 91, 4, 137, 93, 252 }) ' 取字节集长度
    ' 原文长度－－－dword ptr [ebp-4]
    .如果真 (原文长度 ＜ 1)
        返回 (“”)
    .如果真结束
    置入代码 ({ 232, 0, 0, 0, 0, 89, 131, 193, 9, 233, 0, 2, 0, 0 }) ' 跳转到代码
    ' 下面是码表
    置入代码 ({ 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 48, 65, 48, 66, 48, 67, 48, 68, 48, 69, 48, 70, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 49, 65, 49, 66, 49, 67, 49, 68, 49, 69, 49, 70, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 50, 65, 50, 66, 50, 67, 50, 68, 50, 69, 50, 70, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 51, 65, 51, 66, 51, 67, 51, 68, 51, 69, 51, 70, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 52, 65, 52, 66, 52, 67, 52, 68, 52, 69, 52, 70, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 53, 65, 53, 66, 53, 67, 53, 68, 53, 69, 53, 70, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 54, 65, 54, 66, 54, 67, 54, 68, 54, 69, 54, 70, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 55, 65, 55, 66, 55, 67, 55, 68, 55, 69, 55, 70, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 56, 65, 56, 66, 56, 67, 56, 68, 56, 69, 56, 70, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 57, 65, 57, 66, 57, 67, 57, 68, 57, 69, 57, 70, 65, 48, 65, 49, 65, 50, 65, 51, 65, 52, 65, 53, 65, 54, 65, 55, 65, 56, 65, 57, 65, 65, 65, 66, 65, 67, 65, 68, 65, 69, 65, 70, 66, 48, 66, 49, 66, 50, 66, 51, 66, 52, 66, 53, 66, 54, 66, 55, 66, 56, 66, 57, 66, 65, 66, 66, 66, 67, 66, 68, 66, 69, 66, 70, 67, 48, 67, 49, 67, 50, 67, 51, 67, 52, 67, 53, 67, 54, 67, 55, 67, 56, 67, 57, 67, 65, 67, 66, 67, 67, 67, 68, 67, 69, 67, 70, 68, 48, 68, 49, 68, 50, 68, 51, 68, 52, 68, 53, 68, 54, 68, 55, 68, 56, 68, 57, 68, 65, 68, 66, 68, 67, 68, 68, 68, 69, 68, 70, 69, 48, 69, 49, 69, 50, 69, 51, 69, 52, 69, 53, 69, 54, 69, 55, 69, 56, 69, 57, 69, 65, 69, 66, 69, 67, 69, 68, 69, 69, 69, 70, 70, 48, 70, 49, 70, 50, 70, 51, 70, 52, 70, 53, 70, 54, 70, 55, 70, 56, 70, 57, 70, 65, 70, 66, 70, 67, 70, 68, 70, 69, 70, 70 })
    ' 跳转到这里了～～
    码表地址 ＝ 0 ' ebp-8
    结果地址 ＝ 1 ' ebp-c
    原文地址 ＝ 2 ' ebp-10
    ' 本源码来自三叶资源网(www.sanye.cx)
    置入代码 ({ 137, 77, 248 }) ' 码表地址到－－－》变量dword ptr [ebp-8]
    置入代码 ({ 209, 101, 252 }) ' 原文长度 × 2
    结果 ＝ 取空白文本 (原文长度)
    置入代码 ({ 137, 69, 244 }) ' 结果地址 ebp-c
    置入代码 ({ 139, 93, 8, 139, 27, 131, 195, 8, 137, 93, 240 }) ' 原文地址ebp-10
    ' 核心计算过程
    置入代码 ({ 139, 117, 240, 139, 93, 248, 139, 125, 244, 209, 109, 252, 139, 77, 252, 3, 206, 51, 192, 138, 6, 70, 209, 224, 102, 139, 20, 24, 102, 137, 23, 71, 71, 59, 241, 124, 236 })
    返回 (结果)
    ' 本源码来自三叶资源网(www.sanye.cx)
    

.子程序 文本_加密, 文本型, , 失败返回空文本
    .参数 参数_待加密文本, 文本型, , 待加密文本
    .参数 参数_加密的密码, 文本型, , 加密的密码<建议5位以上的数字>
    .局部变量 局_计次, 整数型
    .局部变量 局_过度字节集, 字节集
    .局部变量 局_待加密文本, 字节集

    局_待加密文本 ＝ 到字节集 (参数_待加密文本)
    .计次循环首 (取字节集长度 (局_待加密文本), 局_计次)
        局_过度字节集 ＝ 局_过度字节集 ＋ 到字节集 (到字节 (位异或 (局_待加密文本 [局_计次], 3600)))
    .计次循环尾 ()
    返回 (字节集_字节集到十六进制 (局_过度字节集) ＋ 到大写 (取文本中间 (校验_取md5 (到字节集 (参数_加密的密码)), 3, 9)))

.子程序 MD过程, 文本型
    .参数 x, 字节集
    .参数 种类, 整数型
    .参数 长度, 整数型
    .局部变量 hCryptProv, 整数型
    .局部变量 hKey, 整数型
    .局部变量 hHash, 整数型
    .局部变量 pbBuffer, 字节集
    .局部变量 cbHash, 整数型
    .局部变量 rgbHash, 字节集
    .局部变量 rgbDigits, 字节集
    .局部变量 局_MD5, 字节集
    .局部变量 b, 整数型
    .局部变量 i, 整数型
    .局部变量 len, 整数型

    .如果真 (CryptAcquireContextA (hCryptProv, “”, “”, 1, -268435456) ＝ 0)
        .如果真 (CryptAcquireContextA (hCryptProv, “”, “”, 1, 0) ＝ 0)
            返回 (“”)
        .如果真结束
        
    .如果真结束
    .如果 (CryptCreateHash (hCryptProv, 种类, hKey, 0, hHash) ＝ 0)
        CryptReleaseContext (hCryptProv, 0)
        返回 (“”)
    .否则
        pbBuffer ＝ x
        len ＝ 取字节集长度 (x)
        .如果 (CryptHashData (hHash, pbBuffer, len, 0) ＝ 0)
            CryptDestroyHash (hHash)
            CryptReleaseContext (hCryptProv, 0)
            返回 (“”)
            
        .否则
            rgbHash ＝ 取空白字节集 (长度)
            cbHash ＝ 长度
            .如果 (CryptGetHashParam (hHash, 2, rgbHash, cbHash, 0) ＝ 0)
                CryptDestroyHash (hHash)
                CryptReleaseContext (hCryptProv, 0)
                返回 (“”)
                
            .否则
                rgbDigits ＝ 到字节集 (“0123456789ABCDEF”)
                局_MD5 ＝ 取空白字节集 (长度 × 2)
                
                
                .变量循环首 (0, cbHash － 1, 1, i)
                    b ＝ rgbHash [i ＋ 1]
                    
                    
                    局_MD5 [i × 2 ＋ 1] ＝ rgbDigits [右移 (b, 4) ＋ 1]
                    局_MD5 [i × 2 ＋ 2] ＝ rgbDigits [位与 (b, 15) ＋ 1]
                .变量循环尾 ()
                CryptDestroyHash (hHash)
                CryptReleaseContext (hCryptProv, 0)
            .如果结束
            
            
        .如果结束
        
    .如果结束
    返回 (到文本 (局_MD5))

.子程序 校验_取md5, 文本型, , 取数据MD5
    .参数 字节集数据, 字节集, , 要取数据摘要的字节集
    .参数 返回值转成大写, 逻辑型, 可空, 可空，默认为假。假=小写  真=大写
    .参数 是否取16位, 逻辑型, 可空, 可空，默认为32位
    .局部变量 t, 文本型

    t ＝ MD过程 (字节集数据, 32771, 16)
    
    .如果真 (返回值转成大写 ＝ 假)
        t ＝ 到小写 (t)
    .如果真结束
    
    .判断开始 (是否取16位)
        返回 (取文本中间 (t, 9, 16))
    .默认
        返回 (t)
    .判断结束
    

.子程序 汇编_结束自身, , , 汇编结束
    .参数 a, 整数型, , -1 为自身
    .参数 b, 整数型, 可空

    置入代码 ({ 93, 184, 1, 1, 0, 0, 186, 0, 3, 254, 127, 255, 18, 194, 8, 0 })

.子程序 编码_BASE64解码, 字节集, , BASE64解码处理；成功返回解码后的字节集数据；
    .参数 编码文本, 文本型, , 待解码的文本
    .参数 去除右边空白字节集, 逻辑型, 可空
    .局部变量 文本长度
    .局部变量 整倍数
    .局部变量 三字节组, 字节型, , "3"
    .局部变量 四字节组, 字节型, , "4"
    .局部变量 编码值
    .局部变量 X
    .局部变量 n
    .局部变量 二进制数据, 字节集

    编码文本 ＝ 删全部空 (编码文本)
    编码文本 ＝ 子文本替换 (编码文本, #换行符, , , , 真)
    文本长度 ＝ 取文本长度 (编码文本)
    整倍数 ＝ 文本长度 ＼ 4
    .如果真 (文本长度 ％ 4 ≠ 0)
        整倍数 ＝ 整倍数 ＋ 1
    .如果真结束
    .计次循环首 (整倍数, X)
        .计次循环首 (4, n)
            四字节组 [n] ＝ 到字节 (取代码 (编码文本, (X － 1) × 4 ＋ n))
            编码值 ＝ 寻找文本 (“ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/”, 字符 (四字节组 [n]), , 假)
            .如果真 (编码值 ＝ -1)
                跳出循环 ()
            .如果真结束
            四字节组 [n] ＝ 编码值 － 1
        .计次循环尾 ()
        三字节组 [1] ＝ 到字节 (位或 (四字节组 [1] × 4, 四字节组 [2] ÷ 16))
        三字节组 [2] ＝ 到字节 (位或 (四字节组 [2] × 16, 四字节组 [3] ÷ 4))
        三字节组 [3] ＝ 到字节 (位或 (四字节组 [3] × 64, 四字节组 [4]))
        二进制数据 ＝ 二进制数据 ＋ 到字节集 (三字节组)
        处理事件 ()
    .计次循环尾 ()
    .如果真 (n ＜ 5) ' 最后一组4字符是提前退出的,截取字节集
        n ＝ 5 － n
        二进制数据 ＝ 取字节集左边 (二进制数据, 取字节集长度 (二进制数据) － n)
    .如果真结束
    .如果真 (去除右边空白字节集)
        二进制数据 ＝ 去除右边空字节集 (二进制数据)
    .如果真结束
    返回 (二进制数据)

.子程序 时间_Unix时间戳记反转, 日期时间型
    .参数 时间戳记值, 长整数型, , 要转换的时间戳记值
    .参数 是否为秒, 逻辑型, 可空, 时间戳记值单位 真：秒  假：毫秒   默认为真
    .参数 是否为北京时间, 逻辑型, 可空, 默认为真，
    .局部变量 初始时间, 日期时间型

    .如果真 (是否为空 (是否为北京时间))
        是否为北京时间 ＝ 真
    .如果真结束
    .如果 (是否为北京时间)
        初始时间 ＝ 到时间 (“1970-01-01 08:00:00”)
    .否则
        初始时间 ＝ 到时间 (“1970-01-01 00:00:00”)
    .如果结束
    .如果真 (是否为空 (是否为秒))
        是否为秒 ＝ 真
    .如果真结束
    .如果 (是否为秒)
        返回 (增减时间 (初始时间, #秒, 时间戳记值))
    .否则
        返回 (增减时间 (初始时间, #秒, 时间戳记值 ÷ 1000))
    .如果结束
    返回 (增减时间 (初始时间, #秒, 时间戳记值))
    
    

.子程序 rc4, 字节集
    .参数 原文, 字节集, , 需要加密解密的字节集
    .参数 密码, 字节集, , 输入相应的密码
    .局部变量 m, 字节型, , "256"
    .局部变量 i, 整数型
    .局部变量 j, 整数型
    .局部变量 key, 字节集
    .局部变量 密码长度, 整数型
    .局部变量 原文长度, 整数型
    .局部变量 结果, 字节集
    .局部变量 x, 整数型
    .局部变量 k, 字节型, , "256"
    .局部变量 temp, 字节型

    原文长度 ＝ 取字节集长度 (原文)
    .如果真 (原文长度 ＜ 1)
        返回 ({ })
    .如果真结束
    密码长度 ＝ 取字节集长度 (密码)
    结果 ＝ 取空白字节集 (原文长度)
    .计次循环首 (256, i)
        m [i] ＝ i － 1
    .计次循环尾 ()
    .如果真 (密码长度 ＞ 0)
        key ＝ 到字节集 (密码)
        j ＝ 1
        .计次循环首 (256, i)
            k [i] ＝ key [j]
            j ＝ j ＋ 1
            .如果真 (j ＞ 密码长度)
                j ＝ 1
            .如果真结束
            
        .计次循环尾 ()
        j ＝ 0
        .计次循环首 (256, i)
            j ＝ 位与 (j ＋ m [i] ＋ k [i], 255)
            temp ＝ m [i]
            m [i] ＝ m [j ＋ 1]
            m [j ＋ 1] ＝ temp
        .计次循环尾 ()
    .如果真结束
    i ＝ 0
    j ＝ 0
    .计次循环首 (原文长度, x)
        i ＝ 位与 (i ＋ 1, 255)
        j ＝ 位与 (j ＋ m [i ＋ 1], 255)
        temp ＝ m [i ＋ 1]
        m [i ＋ 1] ＝ m [j ＋ 1]
        m [j ＋ 1] ＝ temp
        结果 [x] ＝ 位异或 (原文 [x], m [位与 (m [i ＋ 1] ＋ m [j ＋ 1], 255) ＋ 1])
    .计次循环尾 ()
    返回 (结果)

.子程序 网页_访问, 字节集, , 使用WinInet的API方式访问网页
    .参数 网址, 文本型, , 完整的网页地址,必须包含http://或者https://
    .参数 访问方式, 整数型, 可空, 0=GET 1=POST 2=HEAD 3=PUT  4=OPTIONS  5=DELETE  6=TRACE  7=CONNECT
    .参数 提交信息, 文本型, 可空, POST专用
    .参数 提交Cookies, 文本型, 参考 可空, 设置提交时的cookie
    .参数 返回Cookies, 文本型, 可空, 返回的Cookie
    .参数 附加协议头, 文本型, 可空, 一行一个请用换行符隔开,建议填写常量值或文本值,防止因传参引发错误
    .参数 返回协议头, 文本型, 参考 可空, 返回的协议头
    .参数 禁止重定向, 逻辑型, 可空, 默认不禁止网页重定向
    .参数 字节集提交, 字节集, 可空, 提交字节集数据
    .参数 代理地址, 文本型, 可空, 代理地址，格式为:ip:port,例如:8.8.8.8:88
    .参数 是否自动合并更新Cookie, 逻辑型, 可空, 默认为真，自动合并更新
    .参数 是否补全必要协议头, 逻辑型, 可空, 当附件协议头为空时自动添加必要的UA协议头 默认为真，假将不再添加非传入协议头
    .参数 是否处理协议头大小写, 逻辑型, 可空, 将协议头中的键名首字母处理为大写  默认为真
    .局部变量 局_Internet句柄, 整数型
    .局部变量 局_Internet连接句柄, 整数型
    .局部变量 局_HTTP请求句柄, 整数型
    .局部变量 局_计次, 整数型
    .局部变量 局_字节集, 字节集
    .局部变量 局_访问方式, 文本型
    .局部变量 局_User_Agent, 文本型
    .局部变量 局_返回协议头, 文本型, , "0"
    .局部变量 局_页面内容, 字节集
    .局部变量 局_请求标记, 整数型
    .局部变量 局_重定向地址, 文本型
    .局部变量 局_HTTPS, 逻辑型
    .局部变量 bAutoDecode, 整数型

    
    .如果真 (是否为空 (是否自动合并更新Cookie))
        是否自动合并更新Cookie ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否补全必要协议头))
        是否补全必要协议头 ＝ 真
    .如果真结束
    
    .如果真 (是否为空 (是否处理协议头大小写))
        是否处理协议头大小写 ＝ 真
    .如果真结束
    
    .如果真 (是否处理协议头大小写)
        附加协议头 ＝ 网页_处理协议头 (附加协议头)
    .如果真结束
    
    ' 局_访问方式 ＝ 选择 (访问方式 ＝ 1, “POST”, “GET”)
    .如果真 (访问方式 ＜ 0 或 访问方式 ＞ 7)
        访问方式 ＝ 0
    .如果真结束
    局_访问方式 ＝ 多项选择 (访问方式 ＋ 1, “GET”, “POST”, “HEAD”, “PUT”, “OPTIONS”, “DELETE”, “TRACE”, “CONNECT”)
    
    .如果真 (到小写 (取文本左边 (网址, 8)) ＝ “https://”)
        局_HTTPS ＝ 真
    .如果真结束
    
    .判断开始 (寻找文本 (附加协议头, “User-Agent:”, , 真) ≠ -1)
        局_User_Agent ＝ 删首尾空 (文本_取出中间文本 (附加协议头 ＋ #换行符, “User-Agent:”, #换行符))
        .如果真 (局_User_Agent ＝ “”)
            局_User_Agent ＝ 内部_协议头取值 (附加协议头)
        .如果真结束
        
    .默认
        局_User_Agent ＝ “Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)”
    .判断结束
    
    .判断开始 (代理地址 ＝ “”)
        局_Internet句柄 ＝ InternetOpenA (局_User_Agent, 1, 字符 (0), 字符 (0), 0)
    .默认
        .判断开始 (局_HTTPS) ' 用于解决win7下https协议代理无效问题
            局_Internet句柄 ＝ InternetOpenA (局_User_Agent, 3, 代理地址, “”, 0)
        .默认
            局_Internet句柄 ＝ InternetOpenA (局_User_Agent, 3, “http=” ＋ 代理地址, “”, 0)
        .判断结束
        
    .判断结束
    
    .如果真 (局_Internet句柄 ＝ 0)
        ' InternetCloseHandle (局_Internet句柄)
        返回 ({ })
    .如果真结束
    局_Internet连接句柄 ＝ InternetConnectA (局_Internet句柄, 网页_取域名 (网址), 网页_取端口 (网址), 字符 (0), 字符 (0), 3, 0, 0)
    .如果真 (局_Internet连接句柄 ＝ 0)
        ' InternetCloseHandle (局_Internet连接句柄)
        InternetCloseHandle (局_Internet句柄)
        返回 ({ })
    .如果真结束
    
    局_请求标记 ＝ 位或 (#INTERNET_FLAG_RELOAD, #INTERNET_COOKIE_THIRD_PARTY)
    .如果真 (取反 (是否为空 (提交Cookies)))
        局_请求标记 ＝ 位或 (局_请求标记, #INTERNET_FLAG_NO_COOKIES)
    .如果真结束
    
    .如果真 (禁止重定向)
        局_请求标记 ＝ 位或 (局_请求标记, #INTERNET_FLAG_NO_AUTO_REDIRECT)
    .如果真结束
    
    .判断开始 (局_HTTPS)
        局_请求标记 ＝ 位或 (局_请求标记, #INTERNET_FLAG_SECURE)
    .默认
        局_请求标记 ＝ 位或 (局_请求标记, #INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS)
    .判断结束
    
    局_HTTP请求句柄 ＝ HttpOpenRequestA (局_Internet连接句柄, 局_访问方式, 网页_取页面地址 (网址), “HTTP/1.1”, 字符 (0), 字符 (0), 局_请求标记, 0)
    .如果真 (局_HTTP请求句柄 ＝ 0)
        ' InternetCloseHandle (局_HTTP请求句柄)
        InternetCloseHandle (局_Internet连接句柄)
        InternetCloseHandle (局_Internet句柄)
        返回 ({ })
    .如果真结束
    
    InternetSetOption (局_HTTP请求句柄, #INTERNET_OPTION_SECURITY_FLAGS, 127872, 4)
    
    .如果真 (是否补全必要协议头)
        .如果真 (附加协议头 ＝ “”)
            附加协议头 ＝ “Accept: */*”
        .如果真结束
        
        .如果真 (寻找文本 (附加协议头, “Accept:”, , 真) ＝ -1)
            附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ “Accept: */*”
        .如果真结束
        
        
        .如果真 (寻找文本 (附加协议头, “Referer:”, , 真) ＝ -1)
            附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ “Referer: ” ＋ 网址
        .如果真结束
        
        .如果真 (寻找文本 (附加协议头, “Accept-Language:”, , 真) ＝ -1)
            附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ “Accept-Language: zh-cn”
        .如果真结束
        
        .如果真 (访问方式 ＝ 1)
            .如果真 (寻找文本 (附加协议头, “Content-Type:”, , 真) ＝ -1)
                附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ “Content-Type: application/x-www-form-urlencoded”
            .如果真结束
            
        .如果真结束
        
    .如果真结束
    
    .如果真 (提交Cookies ≠ “”)
        .判断开始 (寻找文本 (提交Cookies, “Cookie:”, , 假) ＝ -1)
            附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ “Cookie: ” ＋ 提交Cookies
        .默认
            附加协议头 ＝ 附加协议头 ＋ #换行符 ＋ 提交Cookies
        .判断结束
        
    .如果真结束
    
    
    ' 在Vista之后  可以自动解压Gzip
    ' bAutoDecode ＝ 1
    ' InternetSetOptionA_传址 (局_HTTP请求句柄, #INTERNET_OPTION_HTTP_DECODING, bAutoDecode, 4)
    
    .判断开始 (访问方式 ＝ 0)
        HttpSendRequestA (局_HTTP请求句柄, 附加协议头, 取文本长度 (附加协议头), 0, 0)
    .默认
        .如果真 (字节集提交 ＝ { })
            字节集提交 ＝ 到字节集 (提交信息)
        .如果真结束
        HttpSendRequestA (局_HTTP请求句柄, 附加协议头, 取文本长度 (附加协议头), 取指针字节集_ (字节集提交), 取字节集长度 (字节集提交))
    .判断结束
    
    局_计次 ＝ 0
    局_字节集 ＝ 取空白字节集 (1024)
    .循环判断首 ()
        InternetReadFile (局_HTTP请求句柄, 局_字节集, 1024, 局_计次)
        局_页面内容 ＝ 局_页面内容 ＋ 取字节集左边 (局_字节集, 局_计次)
    .循环判断尾 (局_计次 ≠ 0)
    返回协议头 ＝ 取空白文本 (5000)
    HttpQueryInfoA (局_HTTP请求句柄, 22, 返回协议头, 5000, 0)
    ' 返回协议头 ＝ 子文本替换 (返回协议头, “Set-Cookie”, “Set-Cookie”, , , 假)
    InternetCloseHandle (局_HTTP请求句柄)
    InternetCloseHandle (局_Internet连接句柄)
    InternetCloseHandle (局_Internet句柄)
    局_返回协议头 ＝ 分割文本 (返回协议头, #换行符, )
    返回Cookies ＝ “”
    .计次循环首 (取数组成员数 (局_返回协议头), 局_计次)
        .如果真 (文本_取左边 (局_返回协议头 [局_计次], “: ”) ＝ “Set-Cookie”)
            .判断开始 (寻找文本 (局_返回协议头 [局_计次], “;”, , 假) ≠ -1)
                返回Cookies ＝ 返回Cookies ＋ 删首尾空 (文本_取出中间文本 (局_返回协议头 [局_计次], “Set-Cookie:”, “;”)) ＋ “; ”
            .默认
                返回Cookies ＝ 返回Cookies ＋ 删首尾空 (子文本替换 (局_返回协议头 [局_计次], “Set-Cookie:”, , , , 假)) ＋ “; ”
            .判断结束
            
        .如果真结束
        
    .计次循环尾 ()
    返回Cookies ＝ 取文本左边 (返回Cookies, 取文本长度 (返回Cookies) － 2)
    .如果真 (是否自动合并更新Cookie)
        .如果真 (取反 (是否为空 (提交Cookies)))
            返回Cookies ＝ 网页_Cookie合并更新 (提交Cookies, 返回Cookies)
        .如果真结束
        
    .如果真结束
    返回 (局_页面内容)

.子程序 去除右边空字节集, 字节集
    .参数 字节集数据, 字节集
    .局部变量 i, 整数型
    .局部变量 字节集, 字节集

    字节集 ＝ 字节集数据
    .计次循环首 (取字节集长度 (字节集数据), i)
        .如果 (取字节集右边 (字节集, 1) ＝ { 0 })
            字节集 ＝ 取字节集左边 (字节集, 取字节集长度 (字节集) － 1)
        .否则
            跳出循环 ()
        .如果结束
        
    .计次循环尾 ()
    返回 (字节集)

.子程序 内部_协议头取值, 文本型
    .参数 协议头, 文本型
    .局部变量 位置, 整数型
    .局部变量 结果, 文本型

    位置 ＝ 寻找文本 (协议头, “:”, , 假)
    .如果真 (位置 ≠ -1)
        结果 ＝ 取文本右边 (协议头, 取文本长度 (协议头) － 位置)
    .如果真结束
    返回 (删首尾空 (结果))

.子程序 内部_数组成员是否存在_文本, 整数型
    .参数 数组, 文本型, 数组
    .参数 要判断值, 文本型
    .局部变量 局_计次, 整数型

    .计次循环首 (取数组成员数 (数组), 局_计次)
        .如果真 (数组 [局_计次] ＝ 要判断值)
            返回 (局_计次)
        .如果真结束
        
    .计次循环尾 ()
    返回 (-1)

.子程序 网页_取域名, 文本型, , 通过“/”或者“.”来获取网址中的域名，默认使用“/”方式
    .参数 网址, 文本型
    .参数 去除二级域名, 逻辑型, 可空
    .参数 不过滤端口, 逻辑型, 可空
    .参数 后缀点数量, 整数型, 可空, 不留空表示通过“.”的方式取域名 。如：.com后缀点数量为1 ,.com.cn后缀点数量为2
    .局部变量 域名, 文本型
    .局部变量 位置, 整数型
    .局部变量 二级, 文本型, , "0"
    .局部变量 域名长度, 整数型
    .局部变量 前点开始, 整数型, , , 如www.bbs.125.la   www后面.的位置
    .局部变量 前点结束, 整数型, , , 如www.bbs.125.la   bbs后面.的位置
    .局部变量 后点开始, 整数型, , , 如www.bbs.125.la   125后面.的位置

    域名 ＝ 到小写 (网址)
    .判断开始 (是否为空 (后缀点数量)) ' 使用“/”方式获取域名，网页_访问() 内部 必须使用这个
        .如果真 (取文本右边 (域名, 1) ≠ “/”)
            域名 ＝ 域名 ＋ “/”
        .如果真结束
        
        .判断开始 (取文本左边 (域名, 8) ＝ “https://”)
            域名 ＝ 文本_取出中间文本 (域名, “https://”, “/”)
        .默认
            .如果真 (寻找文本 (域名, “http://”, , 假) ＝ -1)
                域名 ＝ “http://” ＋ 域名
            .如果真结束
            域名 ＝ 文本_取出中间文本 (域名, “http://”, “/”)
        .判断结束
        
        .如果真 (去除二级域名)
            二级 ＝ 分割文本 (域名, “.”, )
            位置 ＝ 取数组成员数 (二级)
            .如果真 (位置 ＞ 1)
                域名 ＝ 二级 [位置 － 1] ＋ “.” ＋ 二级 [位置]
            .如果真结束
            
        .如果真结束
        
    .默认
        ' 通过“.”的方式取域名，支持任何后缀域名
        域名 ＝ 子文本替换 (域名, “http://”, “”, , , 真)
        域名 ＝ 子文本替换 (域名, “https://”, “”, , , 真)
        位置 ＝ 寻找文本 (域名, “/”, , 假) ' 一撇位置
        .如果真 (位置 ≠ -1)
            域名 ＝ 取文本左边 (域名, 位置 － 1)
        .如果真结束
        连续赋值 (取文本长度 (域名), 域名长度, 后点开始)
        .计次循环首 (后缀点数量, )
            后点开始 ＝ 倒找文本 (域名, “.”, 后点开始, 假)
        .计次循环尾 ()
        前点结束 ＝ 倒找文本 (域名, “.”, 后点开始, 假)
        .判断开始 (去除二级域名)
            域名 ＝ 取文本右边 (域名, 域名长度 － 前点结束)
        .默认
            ' 保留二级域名---------------------------------------
            .如果真 (前点结束 ≠ -1) ' 至少是二级域名
                前点开始 ＝ 倒找文本 (域名, “.”, 前点结束, 假)
                .如果真 (前点开始 ≠ -1) ' 至少是三级域名
                    域名 ＝ 取文本右边 (域名, 域名长度 － 前点开始)
                .如果真结束
                
            .如果真结束
            
        .判断结束
        
    .判断结束
    ' 端口过滤处理--------------------------------------------------------
    .判断开始 (不过滤端口)
        返回 (域名)
    .默认
        位置 ＝ 寻找文本 (域名, “:”, , 假) ' 冒号位置
        .判断开始 (位置 ≠ -1)
            返回 (取文本左边 (域名, 位置 － 1))
        .默认
            返回 (域名)
        .判断结束
        
    .判断结束
    

.子程序 网页_取端口, 整数型, , 取出网站服务器的默认端口
    .参数 网址, 文本型
    .局部变量 端口, 文本型
    .局部变量 位置, 整数型

    端口 ＝ 网页_取域名 (网址, , 真)
    位置 ＝ 倒找文本 (端口, “:”, , 假)
    .判断开始 (位置 ≠ -1)
        返回 (到整数 (取文本右边 (端口, 取文本长度 (端口) － 位置)))
    .判断 (取文本左边 (到小写 (网址), 5) ＝ “https”)
        返回 (443)
    .默认
        返回 (80)
    .判断结束
    

.子程序 网页_取页面地址, 文本型, , 返回指定网址的页面地址
    .参数 网址, 文本型
    .局部变量 页面地址, 文本型
    .局部变量 符号位置, 整数型
    .局部变量 域名, 文本型

    域名 ＝ 网页_取域名 (网址)
    符号位置 ＝ 寻找文本 (网址, “/”, 寻找文本 (网址, 域名, 1, 真), 真)
    .如果 (符号位置 ＞ 0)
        页面地址 ＝ 取文本右边 (网址, 取文本长度 (网址) － 符号位置 ＋ 1)
    .否则
        页面地址 ＝ “/”
    .如果结束
    返回 (页面地址)

