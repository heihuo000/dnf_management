.版本 2
.支持库 mysql
.支持库 iext
.支持库 spec

.程序集 HPSocket_收包
.程序集变量 m_Data, 字节集

.子程序 _Receive, 整数型, , 通用处理数据
    .参数 pData, 整数型
    .参数 iLength, 整数型
    .局部变量 size, 整数型
    .局部变量 len, 整数型
    .局部变量 ilen2, 整数型
    .局部变量 buff, 整数型
    .局部变量 str, 文本型, , "0"
    .局部变量 int, 整数型
    .局部变量 stra, 文本型, , "0"

    置入代码 (#VMP_S)
    buff ＝ pData
    ilen2 ＝ iLength
    ' 上一次协议为接收数据，且为数据流模式,且文件大小大于0
    m_Data ＝ m_Data ＋ 指针到字节集 (buff, ilen2)
    .如果真 (取字节集右边 (m_Data, 5) ＝ 到字节集 (“</hz>”))
        文本_取中间_批量 (编码_utf8到gb2312 (到文本 (m_Data)), “<hz>”, “</hz>”, str)
        ' ===================================================================
        .计次循环首 (取数组成员数 (str), int)
            stra ＝ 分割文本 (str [int], “|”, )
            .如果真 (stra [1] ＝ “newConfig”) ' 定义标识   初始化内容
                m_Data ＝ { }
                newConfig处理 (str [int])
            .如果真结束
            .如果真 (stra [1] ＝ “listDoll”) ' ' 定义标识  假人列表返回
                m_Data ＝ { }
                listDoll处理 (str [int])
            .如果真结束
            .如果真 (stra [1] ＝ “loginSys”) ' 定义标识  后台登录
                m_Data ＝ { }
                loginSys处理 (str [int])
            .如果真结束
            .如果真 (stra [1] ＝ “sys”) ' 初始化
                m_Data ＝ { }
                初始化内容_ (str [int])
            .如果真结束
            .如果真 (stra [1] ＝ “05”) ' 定义标识  心跳
                m_Data ＝ { }
            .如果真结束
            
        .计次循环尾 ()
        m_Data ＝ { }
    .如果真结束
    
    
    
    返回 (#HR_OK)
    置入代码 (#VMP_E)

.子程序 newConfig处理
    .参数 参数, 文本型
    .局部变量 过滤标识, 文本型, , "0"
    .局部变量 全_开关fg, 文本型, , "0"
    .局部变量 创建图标开关, 文本型
    .局部变量 新契约霸王变量, 文本型, , "0"
    .局部变量 pvf路径和md5值分割, 文本型, , "0"
    .局部变量 md5精准分割, 文本型, , "0"
    .局部变量 md5文件大小, 文本型
    .局部变量 pvfmd5文件号, 整数型
    .局部变量 文件数据, 字节集
    .局部变量 执行newConfig, 整数型

    置入代码 (#VMP_S)
    过滤标识 ＝ 分割文本 (参数, “newConfig|”, )
    全局_数据 ＝ 参数
    置入代码 (#VMP_E)

.子程序 loginSys处理
    .参数 取回内容, 文本型
    .局部变量 分割头部, 文本型, , "0"
    .局部变量 返回登录数据, 文本型, , "0"
    .局部变量 记录集句柄, 整数型
    .局部变量 UID, 文本型
    .局部变量 启动参数, 文本型
    .局部变量 douxing1, 文本型
    .局部变量 PVF_md5, 文本型
    .局部变量 登陆数据_, 文本型
    .局部变量 pvf路径, 文本型, , "0"

    分割头部 ＝ 分割文本 (取回内容, “loginSys|”, )
    返回登录数据 ＝ 分割文本 (分割头部 [2], “|”, )
    .如果真 (取数组成员数 (返回登录数据) ＝ 2)
        UID ＝ 返回登录数据 [1]
        启动参数 ＝ 返回登录数据 [2]
        执行SQL语句 (mysql句柄, “select * from d_starsky.new_config”)
        记录集句柄 ＝ 取记录集 (mysql句柄)
        读字段值 (记录集句柄, “douxing1”, douxing1)
        读字段值 (记录集句柄, “PVF_md5”, PVF_md5)
        释放记录集 (记录集句柄)
        pvf路径 ＝ 分割文本 (PVF_md5, “v*v”, )
        写到文件 (路径 ＋ “\HLogin\6.5”, rc4 (到字节集 (全局_数据), 到字节集 (取小时 (取现行时间 ())) ＋ { 112, 91, 112, 111, 106, 105, 101, 103, 111, 117 }))
        登陆数据_ ＝ “ ” ＋ 加密注册码 (_主界面窗口.账号管理.取标题 (_主界面窗口.账号管理.现行选中项, )) ＋ “ ” ＋ 加密注册码 (UID) ＋ “ ” ＋ 加密注册码 (_主界面窗口.账号管理.取标题 (_主界面窗口.账号管理.现行选中项, )) ＋ “ ” ＋ 文本_加密 (全局_密文, 到文本 (取小时 (取现行时间 ())) ＋ 到文本 ({ 112, 91, 112, 111, 106, 105, 101, 103, 111, 117 })) ＋ “ ” ＋ 文本_加密 (douxing1, “ERG”) ＋ “ ” ＋ 加密注册码 (pvf路径 [2]) ＋ “ ” ＋ RC4加密 (存储变量IP地址, “7675654”) ＋ “ ” ＋ 加密注册码 (“0”) ＋ “ ” ＋ “普通级” ＋ “ ” ＋ “冒险级” ＋ “ ” ＋ “王者级” ＋ “ ” ＋ “地狱级” ＋ “ ” ＋ “英雄级” ＋ “ ” ＋ “0”
        系统_以管理员模式创建进程 (路径 ＋ “/DNF.exe ”, 启动参数 ＋ “ ” ＋ “解密狗” ＋ “ ” ＋ “你在破解嘛” ＋ “ ” ＋ RC4加密 (“starsky登录器”, “Decryption command go”) ＋ 登陆数据_)
        信息框 (“启动成功！”, 0, , )
    .如果真结束
    

.子程序 listDoll处理
    .参数 取回内容, 文本型
    .局部变量 分割头部, 文本型, , "2"
    .局部变量 name, 文本型, , "0"
    .局部变量 临时文本, 文本型
    .局部变量 cid, 文本型
    .局部变量 j, 整数型
    .局部变量 curarea, 文本型
    .局部变量 curvill, 文本型
    .局部变量 curx, 文本型
    .局部变量 cury, 文本型
    .局部变量 id, 文本型
    .局部变量 ip, 文本型
    .局部变量 port, 文本型
    .局部变量 runtime, 文本型
    .局部变量 js, 类_json
    .局部变量 userstate, 文本型, , "2"
    .局部变量 状态, 文本型
    .局部变量 huazhi_存储假人配置, 文本型
    .局部变量 网络, 文本型
    .局部变量 robot_type, 文本型
    .局部变量 假人类型, 文本型
    .局部变量 i, 整数型

    假人计次 ＝ 0
    分割头部 ＝ 分割文本 (取回内容, “listDoll|”, )
    js.解析 (分割头部 [2])
    临时文本 ＝ js.取数据文本 ()
    临时文本 ＝ 子文本替换 (临时文本, #引号, , , , 真)
    临时文本 ＝ 子文本替换 (临时文本, “{userstatus:[”, , , , 真)
    临时文本 ＝ 子文本替换 (临时文本, “,”, , , , 真)
    临时文本 ＝ 子文本替换 (临时文本, “}]}”, “}”, , , 真)
    name ＝ 分割文本 (临时文本, “}”, )
    _主界面窗口.假人列表框.全部删除 ()
    
    .计次循环首 (取数组成员数 (name), j)
        .如果真 (name [j] ＝ “null”)
            _主界面窗口.假人_标签.标题 ＝ “假人列表为空！”
            假人计次 ＝ 0
            _主界面窗口.假人_标签.标题 ＝ 到文本 (假人计次) ＋ “ 人”
            返回 ()
        .如果真结束
        cid ＝ 文本_取出中间文本 (name [j], “cid:”, “conncount”, , )
        curarea ＝ 文本_取出中间文本 (name [j], “curarea:”, “curvill”, , )
        curvill ＝ 文本_取出中间文本 (name [j], “curvill:”, “curx”, , )
        curx ＝ 文本_取出中间文本 (name [j], “curx:”, “cury”, , )
        cury ＝ 文本_取出中间文本 (name [j], “cury:”, “id”, , )
        id ＝ 文本_取出中间文本 (name [j], “uid:”, “userstate”, , )
        ' ip ＝ 文本_取出中间文本 (name [j], “ip:”, “lasterror”, , )
        robot_type ＝ 文本_取出中间文本 (name [j], “robot_type:”, “runtime”, , )
        port ＝ 文本_取出中间文本 (name [j], “port:”, “robot_type”, , )
        runtime ＝ 文本_取出中间文本 (name [j], “runtime:”, “uid”, , )
        userstate ＝ 分割文本 (name [j], “userstate:”, )
        .如果真 (取数组成员数 (userstate) ＝ 2)
            .如果真 (userstate [2] ＝ “0”)
                状态 ＝ “离线”
            .如果真结束
            .如果真 (userstate [2] ＝ “1”)
                状态 ＝ “启动”
            .如果真结束
            .如果真 (userstate [2] ＝ “2”)
                状态 ＝ “登录”
            .如果真结束
            .如果真 (userstate [2] ＝ “3”)
                状态 ＝ “在线”
            .如果真结束
            .如果真 (userstate [2] ＝ “4”)
                状态 ＝ “清理”
            .如果真结束
            .如果真 (userstate [2] ＝ “5”)
                状态 ＝ “错误”
            .如果真结束
            
        .如果真结束
        假人计次 ＝ 假人计次 ＋ 1
        .如果真 (robot_type ＝ “0”)
            假人类型 ＝ “站街”
        .如果真结束
        .如果真 (robot_type ＝ “1”)
            假人类型 ＝ “商人”
        .如果真结束
        .如果真 (robot_type ＝ “2”)
            假人类型 ＝ “摆摊”
        .如果真结束
        .如果真 (robot_type ＝ “3”)
            假人类型 ＝ “分解”
        .如果真结束
        
        
        
        
        _主界面窗口.假人列表框.插入表项 (-1, 1, , 30, , )
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 0, id)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 1, cid)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 2, port)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 3, 假人类型)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 4, curvill)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 5, curarea)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 6, curx)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 7, cury)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 8, 状态)
        _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 9, 秒到时间 (到整数 (runtime)))
        ' _主界面窗口.假人列表框.置标题 (_主界面窗口.假人列表框.取表项数 () － 1, 10, “右键操作”)
        
        
        
        
        
        .判断开始 (huazhi_存储假人配置 ＝ “”)
            huazhi_存储假人配置 ＝ “('” ＋ id ＋ “','” ＋ “0” ＋ “','” ＋ “0” ＋ “')”
        .默认
            huazhi_存储假人配置 ＝ huazhi_存储假人配置 ＋ “,('” ＋ id ＋ “','” ＋ “0” ＋ “','” ＋ “0” ＋ “')”
        .判断结束
        
    .计次循环尾 ()
    .如果真 (执行SQL语句 (mysql句柄, “INSERT INTO d_starsky.v4_ai_user (uid,msg_state,move_state) VALUES ” ＋ huazhi_存储假人配置 ＋ “ ON DUPLICATE KEY UPDATE uid = VALUES (uid)”)) ' 假人添加控制表
        调试输出 (222)
    .如果真结束
    _主界面窗口.假人_标签.标题 ＝ 到文本 (假人计次) ＋ “ 人”
    

.子程序 秒到时间, 文本型
    .参数 秒数, 整数型
    .局部变量 日, 文本型
    .局部变量 时, 文本型
    .局部变量 分, 文本型
    .局部变量 秒, 文本型
    .局部变量 天, 文本型

    秒 ＝ 到文本 (秒数 ％ 60)
    分 ＝ 到文本 (秒数 ＼ 60 ％ 60)
    时 ＝ 到文本 (秒数 ＼ 3600 ％ 24)
    天 ＝ 到文本 (秒数 ＼ (3600 × 24))
    天 ＝ 选择 (取文本长度 (天) ＝ 1, “0” ＋ 天, 天)
    时 ＝ 选择 (取文本长度 (时) ＝ 1, “0” ＋ 时, 时)
    分 ＝ 选择 (取文本长度 (分) ＝ 1, “0” ＋ 分, 分)
    秒 ＝ 选择 (取文本长度 (秒) ＝ 1, “0” ＋ 秒, 秒)
    返回 (天 ＋ “天” ＋ 时 ＋ “小时” ＋ 分 ＋ “分钟”)

.子程序 初始化内容_
    .参数 text, 文本型

    .如果 (text ＝ “sys|ok”)
        调试输出 (“加载成功！”)
    .否则
        调试输出 (“加载失败！”)
    .如果结束
    
    

.子程序 文本_取中间_批量, 整数型, , 比如：欲取全文本为<12345>,现在要取出“3”，<3>的前面为“2”，<3>的后面为“4”
    .参数 源文本, 文本型, , 比如：欲取全文本为 12345
    .参数 前面标识文本, 文本型, , 3的前面为“2”
    .参数 后面标识文本, 文本型, , 3的后面为“4”
    .参数 存放取出文本的数组, 文本型, 可空 数组, 存放取出文本的数组
    .参数 是否不区分大小写, 逻辑型, 可空, 是否区分大小写
    .参数 文本长度大于此数的不要, 整数型, 可空, 文本长度大于此数的不要;如取出的文本大于50的不要;留空为不限制(下面参数中的加入的后缀不算在其中，标志文本为真那么标志算在其中)
    .参数 为取出的文本加上前缀, 文本型, 可空, 在取出的文本前面加上一段字符或汉字！可空！
    .参数 为取出的文本加上后缀, 文本型, 可空, 在取出的文本后面加上一段字符或汉字！可空！
    .参数 连前面标识文本一起取出, 逻辑型, 可空, 是否连<前面标识文本>一起取出? 默认为假，不取出！
    .参数 连后面标识文本一起取出, 逻辑型, 可空, 是否连<后面标识文本>一起取出? 默认为假，不取出！
    .参数 起始位置, 整数型, 可空
    .局部变量 数组数量, 整数型
    .局部变量 已经找到的, 整数型
    .局部变量 StartPos, 整数型
    .局部变量 EndPos, 整数型
    .局部变量 Search, 文本型
    .局部变量 中间长度, 整数型

    清除数组 (存放取出文本的数组)
    StartPos ＝ 起始位置
    .循环判断首 ()
        StartPos ＝ 寻找文本 (源文本, 前面标识文本, StartPos, 是否不区分大小写)
        .如果 (StartPos ≠ -1)
            StartPos ＝ StartPos ＋ 取文本长度 (前面标识文本)
            EndPos ＝ 寻找文本 (源文本, 后面标识文本, StartPos, 是否不区分大小写)
            .如果 (EndPos ≠ -1)
                中间长度 ＝ EndPos － StartPos
                Search ＝ 取文本中间 (源文本, StartPos, 中间长度)
                Search ＝ 为取出的文本加上前缀 ＋ Search ＋ 为取出的文本加上后缀
                
                .如果真 (连前面标识文本一起取出 ＝ 真)
                    Search ＝ 前面标识文本 ＋ Search
                .如果真结束
                .如果真 (连后面标识文本一起取出 ＝ 真)
                    Search ＝ Search ＋ 后面标识文本
                .如果真结束
                
                .如果 (文本长度大于此数的不要 ＝ 0)
                    加入成员 (存放取出文本的数组, Search)
                .否则
                    .如果真 (取文本长度 (Search) ＜ 文本长度大于此数的不要)
                        加入成员 (存放取出文本的数组, Search)
                    .如果真结束
                    
                .如果结束
                处理事件 ()
            .否则
                跳出循环 ()
            .如果结束
            处理事件 ()
        .否则
            跳出循环 ()
        .如果结束
        处理事件 ()
    .循环判断尾 (StartPos ≠ -1)
    
    返回 (取数组成员数 (存放取出文本的数组))

